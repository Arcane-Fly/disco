{
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint",
    "import",
    "regexp"
  ],
  "extends": [
    "eslint:recommended", 
    "plugin:@typescript-eslint/recommended",
    "plugin:regexp/recommended",
    "prettier"
  ],
  "env": {
    "node": true,
    "es2022": true,
    "jest": true
  },
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "overrides": [
    {
      "files": ["test/**/*.ts", "test/**/*.js", "**/*.test.ts", "**/*.test.js", "**/*.spec.ts", "**/*.spec.js"],
      "rules": {
        "no-restricted-syntax": "off",
        "no-restricted-properties": "off",
        "regexp/no-super-linear-backtracking": "warn",
        "regexp/no-useless-quantifier": "warn"
      }
    }
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "no-console": "off",
    "prefer-const": "error",
    "no-var": "error",
    
    "no-new-wrappers": "error",
    "no-eval": "error",
    "regexp/no-super-linear-backtracking": "error",
    "regexp/no-useless-quantifier": "error",
    "regexp/no-empty-alternative": "error",
    "regexp/no-dupe-characters-character-class": "error",
    "regexp/optimal-quantifier-concatenation": "error",
    "regexp/no-legacy-features": "error",
    
    "no-restricted-syntax": [
      "error",
      {
        "selector": "NewExpression[callee.name='RegExp']",
        "message": "Regex is disallowed. Use a parser or approved helper. If truly needed, document exception in CONTRIBUTING.md."
      }
    ],
    
    "no-restricted-properties": [
      "error",
      {
        "object": "String",
        "property": "match",
        "message": "Use typed parsing, URL, JSON, DOM APIs instead of regex match."
      },
      {
        "object": "String",
        "property": "search",
        "message": "Avoid regex search; use includes/startsWith/endsWith."
      }
    ],
    "import/no-restricted-paths": [
      "error",
      {
        "zones": [
          {
            "target": "./src/features/auth",
            "from": "./src/features",
            "except": ["./auth"]
          },
          {
            "target": "./src/features/dashboard",
            "from": "./src/features", 
            "except": ["./dashboard"]
          },
          {
            "target": "./src/features/workflow",
            "from": "./src/features",
            "except": ["./workflow"]
          },
          {
            "target": "./src/features/analytics",
            "from": "./src/features",
            "except": ["./analytics"]
          },
          {
            "target": "./src/features/collaboration", 
            "from": "./src/features",
            "except": ["./collaboration"]
          },
          {
            "target": "./src/features",
            "from": "./src/app"
          },
          {
            "target": [
              "./src/shared/components",
              "./src/shared/hooks", 
              "./src/shared/lib",
              "./src/shared/types",
              "./src/shared/utils"
            ],
            "from": ["./src/features", "./src/app"]
          }
        ]
      }
    ]
  },
  "ignorePatterns": ["dist/", "node_modules/", "*.js"]
}
